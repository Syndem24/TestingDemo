@{
    ViewData["Title"] = "Task Flow Management";
}

<div class="container my-5">
    <h2 class="text-center mb-4">Task Flow Management</h2>

    <!-- Success Message Notification -->
    @if (TempData["SuccessMessage"] != null)
    {
            <div class="alert alert-success alert-dismissible fade show" role="alert">
                <i class="bi bi-check-circle-fill me-2"></i> @TempData["SuccessMessage"]
                <button type="button" class="btn-close" data-bs-dismiss="alert" aria-label="Close"></button>
            </div>
    }

    <div class="d-flex justify-content-between align-items-center mb-4">
        <div>
            <a href="@Url.Action("DocumentArchive", "Task")" class="btn btn-secondary">
                <i class="bi bi-folder-check me-2"></i> Document Archive
            </a>
            <a href="@Url.Action("History", "Task")" class="btn btn-info ms-2">
                <i class="bi bi-clock-history me-2"></i> History
            </a>
        </div>
        <a href="@Url.Action("AddTask", "Task")" class="btn btn-success">
            <i class="bi bi-plus-circle-fill"></i> Add New Task
        </a>
    </div>

    <!-- Search Bar and Priority Filter -->
    <div class="row mb-4">
        <div class="col-md-8">
            <input type="text" id="taskSearch" class="form-control" placeholder="Search tasks...">
        </div>
        <div class="col-md-4">
            <select id="priorityFilter" class="form-select">
                <option value="">All Priorities</option>
                <option value="Urgent">Urgent</option>
                <option value="Slightly Important">Slightly Important</option>
                <option value="Normal">Normal</option>
            </select>
        </div>
    </div>

    <div class="row">
        <div class="col-12 mb-4">
            <div class="card shadow-sm">
                <div class="card-header bg-primary text-white">
                    <h5 class="mb-0">Current Task List</h5>
                </div>
                <div class="card-body p-0">
                    <table class="table table-hover mb-0 align-middle" id="taskTable">
                        <thead class="table-light">
                            <tr>
                                <th>Client</th>
                                <th>Permit</th>
                                <th>Requirements</th>
                                <th>Progress</th>
                                <th>Priority</th>
                                <th>Issued</th>
                                <th class="text-center">Actions</th>
                            </tr>
                        </thead>
                        <tbody>
                            @if (ViewBag.Tasks != null && ViewBag.Tasks.Count > 0)
                            {
                                foreach (var task in ViewBag.Tasks)
                                {
                                    string badgeClass = task.Priority switch
                                    {
                                        "Urgent" => "bg-danger",
                                        "Slightly Important" => "bg-warning text-dark",
                                        "Normal" => "bg-secondary",
                                        _ => "bg-light text-dark"
                                    };

                                            <tr data-priority="@task.Priority.ToLower()">
                                                <td>@task.ClientName</td>
                                                <td>@task.Permit</td>

                                                <td>
                                            @if (!string.IsNullOrEmpty(task.Requirements))
                                            {
                                                var reqs = task.Requirements.Split(',', StringSplitOptions.RemoveEmptyEntries);
                                                            <ul class="mb-0 ps-3">
                                                    @foreach (var r in reqs)
                                                    {
                                                                        <li>@r.Trim()</li>
                                                    }
                                                            </ul>
                                            }
                                            else
                                            {
                                                            <span class="text-muted">None</span>
                                            }
                                                </td>

                                                <td style="width: 180px;">
                                                    <div class="progress">
                                                        <div class="progress-bar @(task.Progress == 0 ? "bg-secondary" : "bg-info progress-bar-striped")"
                                                            role="progressbar"
                                                            style="width: @(task.Progress == 0 ? "100%" : $"{task.Progress}%")"
                                                            aria-valuenow="@(task.Progress == 0 ? 0 : task.Progress)" aria-valuemin="0"
                                                            aria-valuemax="100">
                                                    @(task.Progress == 0 ? "No progress yet" : $"{task.Progress}%")
                                                        </div>
                                                    </div>
                                                </td>

                                                <td>
                                                    <span class="badge @badgeClass px-3 py-2 rounded-pill">@task.Priority</span>
                                                </td>

                                                <td>@task.DateIssued.ToString("MMM dd, yyyy h:mm tt")</td>

                                                <td class="text-center">
                                                    <a href="@Url.Action("EditTask", "Task", new { id = task.Id })"
                                                        class="btn btn-sm btn-warning me-1" title="Edit">
                                                        <i class="bi bi-pencil-fill"></i>
                                                    </a>
                                                    <a href="@Url.Action("DeleteConfirmation", "Task", new { id = task.Id })"
                                                        class="btn btn-sm btn-danger me-1" title="Delete">
                                                        <i class="bi bi-trash-fill"></i>
                                                    </a>
                                                    <a href="@Url.Action("MarkAsDone", "Task", new { id = task.Id })"
                                                        class="btn btn-sm btn-success" title="Mark as Done"
                                                        onclick="return confirm('Are you sure you want to mark this task as done? It will be moved to the archive.');">
                                                        <i class="bi bi-check-circle-fill"></i>
                                                    </a>
                                                </td>
                                            </tr>
                                }
                            }
                            else
                            {
                                    <tr>
                                        <td colspan="7" class="text-center text-muted py-4">No tasks available.</td>
                                    </tr>
                            }
                        </tbody>
                    </table>
                </div>
            </div>
        </div>
    </div>
</div>

<script>
    // JavaScript for search functionality
    document.getElementById('taskSearch').addEventListener('input', function () {
        const searchValue = this.value.toLowerCase();
        const rows = document.querySelectorAll('#taskTable tbody tr');

        rows.forEach(row => {
            const cells = row.querySelectorAll('td');
            const rowText = Array.from(cells).map(cell => cell.textContent.toLowerCase()).join(' ');
            row.style.display = rowText.includes(searchValue) ? '' : 'none';
        });
    });

    // JavaScript for priority filter
    document.getElementById('priorityFilter').addEventListener('change', function () {
        const selectedPriority = this.value.toLowerCase();
        const rows = document.querySelectorAll('#taskTable tbody tr');

        rows.forEach(row => {
            const rowPriority = row.getAttribute('data-priority');
            row.style.display = selectedPriority === '' || rowPriority === selectedPriority ? '' : 'none';
        });
    });
</script>