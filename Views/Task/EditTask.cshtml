    @model TaskFlowModel

    @{
        ViewData["Title"] = "Edit Task";
    }

    <div class="container mt-4">
        <h2 class="text-center">
            <i class="bi bi-pencil-square"></i> Edit Task
        </h2>

        <div class="alert alert-warning text-center" role="alert">
            <i class="bi bi-exclamation-triangle"></i>
            Are you sure you want to edit this task?
        </div>

        <div class="card shadow-sm p-4">
            <form method="post" asp-action="EditTask" asp-controller="Task" onsubmit="return updateHiddenRequirements();">
                <input type="hidden" name="Id" value="@Model.Id" />

                <div class="mb-3">
                    <label class="form-label"><i class="bi bi-person"></i> Client Name:</label>
                    <input type="text" name="ClientName" class="form-control" value="@Model.ClientName" required />
                </div>

                <div class="mb-3">
                    <label class="form-label"><i class="bi bi-file-earmark"></i> Permit:</label>
                    <input type="text" name="Permit" class="form-control" value="@Model.Permit" required />
                </div>

                <!-- ✅ Requirements Section -->
                <div class="mb-3">
                    <label class="form-label"><i class="bi bi-list-check"></i> Requirements:  <p class="text-muted"><i class="bi bi-info-circle"></i> Please **uncheck** the requirements you do not want to include.</p></label>

                    <div id="requirementsList">
                        @if (Model.RequirementList?.Any() == true)
                        {
                            @foreach (var requirement in Model.RequirementList)
                            {
                                <div class="d-flex align-items-center mb-2 requirement-item">
                                    <input class="form-check-input req-checkbox me-2" type="checkbox" name="selectedRequirements" value="@requirement"
                                           id="req_@requirement" onchange="updateProgress()" checked>
                                    <label class="form-check-label flex-grow-1" for="req_@requirement">@requirement</label>
                                    <button type="button" class="btn btn-danger btn-sm" onclick="removeRequirement(this)">
                                        <i class="bi bi-trash"></i>
                                    </button>
                                </div>
                            }
                        }
                        else
                        {
                            <p class="text-muted">No requirements available.</p>
                        }
                    </div>

                    <!-- ✅ Add New Requirement -->
                    <div class="input-group mt-2">
                        <input type="text" id="newRequirement" class="form-control" placeholder="Enter new requirement" />
                        <button type="button" class="btn btn-success" onclick="addRequirement()">
                            <i class="bi bi-plus-circle"></i> Add
                        </button>
                    </div>
                </div>

                <!-- ✅ Hidden Input to Store Checked Requirements -->
                <input type="hidden" id="requirements" name="Requirements" value="@Model.Requirements" />

                <!-- ✅ NEW: Hidden Input to Store Completed Requirements -->
                <input type="hidden" id="doneRequirements" name="DoneRequirements" value="@Model.DoneRequirements" />

            <!-- ✅ NEW: Completion Checklist Section -->
            <div class="mb-4">
                <label class="form-label"><i class="bi bi-check2-all"></i> Completion Checklist:</label>
                <p class="text-muted"><i class="bi bi-info-circle"></i> Check items as they are completed to update progress.</p>

                <div id="completionChecklist" class="border p-3 rounded bg-light">
                    @if (Model.RequirementList?.Any() == true)
                    {
                        @foreach (var requirement in Model.RequirementList)
                        {
                            bool isChecked = Model.CheckedRequirements.Contains(requirement);
                            <div class="form-check mb-2">
                                <input class="form-check-input completion-checkbox" type="checkbox"
                                       id="complete_@requirement" value="@requirement"
                                @(isChecked ? "checked" : "")
                                       onchange="updateCompletionStatus()">
                                <label class="form-check-label" for="complete_@requirement">
                                    @requirement
                                </label>
                            </div>
                        }
                    }
                    else
                    {
                        <p class="text-muted">No requirements available to complete.</p>
                    }
                </div>
            </div>

            <div class="mb-3">
                <label class="form-label"><i class="bi bi-bar-chart-line"></i> Progress (%):</label>
                <input type="number" id="progress" name="Progress" class="form-control" min="0" max="100" value="@Model.Progress" required readonly />
                <div class="progress mt-2">
                    <div id="progressBar" class="progress-bar" role="progressbar" style="width: @Model.Progress%;"
                         aria-valuenow="@Model.Progress" aria-valuemin="0" aria-valuemax="100">
                        @Model.Progress%
                    </div>
                </div>
            </div>

            <div class="mb-3">
                <label class="form-label"><i class="bi bi-flag"></i> Priority:</label>
                <select name="Priority" class="form-select" required>
                    <option value="Normal" selected="@(Model.Priority == "Normal")">Normal</option>
                    <option value="Slightly Important" selected="@(Model.Priority == "Slightly Important")">Slightly Important</option>
                    <option value="Urgent" selected="@(Model.Priority == "Urgent")">Urgent</option>
                </select>
            </div>

            <div class="d-flex justify-content-between">
                <button type="submit" class="btn btn-primary" onclick="return confirm('Are you sure you want to save changes?');">
                    <i class="bi bi-save"></i> Save Changes
                </button>
                <a href="@Url.Action("TaskFlow", "Task")" class="btn btn-secondary">
                    <i class="bi bi-arrow-left-circle"></i> Cancel
                </a>
            </div>
        </form>
    </div>
</div>

<!-- ✅ JavaScript for Dynamic Requirements and Progress -->
<script>
    // ✅ Initialize with the current done requirements
    let currentDoneRequirements = '@Model.DoneRequirements'.split(',').filter(item => item.trim() !== '');

    function updateProgress() {
        let checkboxes = document.querySelectorAll(".req-checkbox");
        let totalCount = checkboxes.length;

        // Update the completion checklist when requirements change
        updateCompletionChecklist();

        // Recalculate progress based on completion checkboxes
        updateCompletionStatus();
    }

    function updateCompletionStatus() {
        let allRequirements = Array.from(document.querySelectorAll(".req-checkbox:checked")).map(cb => cb.value);
        let totalCount = allRequirements.length;

        // Get checked completion boxes
        let completedRequirements = Array.from(document.querySelectorAll(".completion-checkbox:checked")).map(cb => cb.value);

        // Only count completions for requirements that actually exist
        let validCompletions = completedRequirements.filter(req => allRequirements.includes(req));
        let completedCount = validCompletions.length;

        // Ensure progress doesn't exceed 100%
        let progress = totalCount > 0 ? Math.min(100, Math.round((completedCount / totalCount) * 100)) : 0;

        // Update progress bar
        let progressBar = document.getElementById("progressBar");
        progressBar.style.width = progress + "%";
        progressBar.setAttribute("aria-valuenow", progress);
        progressBar.textContent = progress + "%";

        // Update the hidden field for done requirements
        document.getElementById("doneRequirements").value = validCompletions.join(",");
    }

    function updateCompletionChecklist() {
        let checklist = document.getElementById("completionChecklist");
        checklist.innerHTML = "";

        // Get all selected requirements
        let selectedRequirements = Array.from(document.querySelectorAll(".req-checkbox:checked")).map(cb => cb.value);

        if (selectedRequirements.length === 0) {
            checklist.innerHTML = "<p class='text-muted'>No requirements available to complete.</p>";
            return;
        }

        // Create a checkbox for each requirement
        selectedRequirements.forEach(req => {
            let div = document.createElement("div");
            div.className = "form-check mb-2";

            let checkbox = document.createElement("input");
            checkbox.type = "checkbox";
            checkbox.className = "form-check-input completion-checkbox";
            checkbox.id = "complete_" + req;
            checkbox.value = req;
            checkbox.onchange = updateCompletionStatus;

            // Check if this requirement was previously completed
            if (currentDoneRequirements.includes(req)) {
                checkbox.checked = true;
            }

            let label = document.createElement("label");
            label.className = "form-check-label";
            label.setAttribute("for", "complete_" + req);
            label.textContent = req;

            div.appendChild(checkbox);
            div.appendChild(label);
            checklist.appendChild(div);
        });

        // Update progress after rebuilding the checklist
        updateCompletionStatus();
    }

    function addRequirement() {
        let input = document.getElementById("newRequirement");
        let requirement = input.value.trim();
        if (requirement === "") {
            alert("Requirement cannot be empty!");
            return;
        }

        let requirementsList = document.getElementById("requirementsList");

        let div = document.createElement("div");
        div.className = "d-flex align-items-center mb-2 requirement-item";

        let checkbox = document.createElement("input");
        checkbox.type = "checkbox";
        checkbox.className = "form-check-input req-checkbox me-2";
        checkbox.name = "selectedRequirements";
        checkbox.value = requirement;
        checkbox.onchange = updateProgress;
        checkbox.checked = true; // ✅ Default to checked

        let label = document.createElement("label");
        label.className = "form-check-label flex-grow-1";
        label.textContent = requirement;

        let removeBtn = document.createElement("button");
        removeBtn.type = "button";
        removeBtn.className = "btn btn-danger btn-sm";
        removeBtn.innerHTML = '<i class="bi bi-trash"></i>';
        removeBtn.onclick = function () {
            requirementsList.removeChild(div);
            updateProgress();
        };

        div.appendChild(checkbox);
        div.appendChild(label);
        div.appendChild(removeBtn);
        requirementsList.appendChild(div);

        alert(`"${requirement}" has been added to the requirements.`);

        updateProgress();
        input.value = "";
    }

    function removeRequirement(button) {
        let requirementItem = button.parentElement;
        requirementItem.remove();
        updateProgress();
    }

    function updateHiddenRequirements() {
        // Update requirements list (all items in the list)
        let checkedBoxes = document.querySelectorAll(".req-checkbox:checked");
        let selectedValues = Array.from(checkedBoxes).map(checkbox => checkbox.value);
        document.getElementById("requirements").value = selectedValues.join(",");

        // Update done requirements list (all completed items)
        let completedBoxes = document.querySelectorAll(".completion-checkbox:checked");
        let completedValues = Array.from(completedBoxes)
            .filter(checkbox => selectedValues.includes(checkbox.value))
            .map(checkbox => checkbox.value);
        document.getElementById("doneRequirements").value = completedValues.join(",");
        console.log("Submitting form with progress:", document.getElementById("progress").value);
        // return true; // Allows the form to submit
        // let progress = parseInt(document.getElementById("progress").value);
        // if (progress === 0) {
        //     if (!confirm("Progress is at 0%. Are you sure you want to save?")) {
        //         return false; // Cancel submission
        //     }
        // }

        // return true;
    }

    // ✅ Ensure everything is initialized on page load
    document.addEventListener("DOMContentLoaded", function () {
        updateCompletionChecklist();
        updateCompletionStatus();
    });
</script>