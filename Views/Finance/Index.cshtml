@model TestingDemo.ViewModels.FinanceDashboardViewModel
@{
    ViewData["Title"] = "Finance Dashboard";
}

<div class="container-fluid">
    <!-- Header -->
    <div class="d-flex justify-content-between align-items-center mb-4">
        <h2 class="mb-0"><i class="bi bi-wallet2"></i> @ViewData["Title"]</h2>
        <div class="d-flex">
            <form asp-action="Index" method="get" class="d-flex me-2">
                <div class="input-group">
                    <input type="text" name="searchString" value="@ViewData["CurrentFilter"]"
                        class="form-control form-control-sm" placeholder="Find client...">
                    @if (!string.IsNullOrEmpty(ViewData["CurrentFilter"] as string))
                    {
                        <a asp-action="Index" asp-route-sortOrder="@ViewData["CurrentSort"]"
                            class="btn btn-outline-secondary btn-sm"><i class="bi bi-x-lg"></i></a>
                    }
                    <button type="submit" class="btn btn-primary btn-sm"><i class="bi bi-search"></i></button>
                </div>
            </form>
            <div class="dropdown">
                <a class="btn btn-outline-secondary btn-sm dropdown-toggle" href="#" role="button"
                    data-bs-toggle="dropdown">
                    Sort by: @(ViewData["CurrentSort"]?.ToString() ?? "Default")
                </a>
                <ul class="dropdown-menu dropdown-menu-end">
                    <li><a class="dropdown-item" asp-action="Index" asp-route-sortOrder=""
                            asp-route-searchString="@ViewData["CurrentFilter"]">Default</a></li>
                    <li><a class="dropdown-item" asp-action="Index" asp-route-sortOrder="name_desc"
                            asp-route-searchString="@ViewData["CurrentFilter"]">Name (Z-A)</a></li>
                    <li><a class="dropdown-item" asp-action="Index" asp-route-sortOrder="Date"
                            asp-route-searchString="@ViewData["CurrentFilter"]">Date (Oldest)</a></li>
                    <li><a class="dropdown-item" asp-action="Index" asp-route-sortOrder="date_desc"
                            asp-route-searchString="@ViewData["CurrentFilter"]">Date (Newest)</a></li>
                </ul>
            </div>
            <a asp-action="Create" class="btn btn-success btn-sm ms-2">
                <i class="bi bi-plus-circle"></i> New Application
            </a>
        </div>
    </div>

    @if (TempData["SuccessMessage"] != null)
    {
        <div class="alert alert-success">@TempData["SuccessMessage"]</div>
    }

    <!-- Pending Applications -->
    <div class="card shadow-sm mb-4">
        <div class="card-header bg-light d-flex justify-content-between align-items-center">
            <h5 class="mb-0"><i class="bi bi-file-earmark-text"></i> Pending Applications</h5>
            <span class="badge bg-secondary rounded-pill">@Model.PendingClients.TotalCount</span>
        </div>
        <div class="card-body p-0">
            @if (Model.PendingClients.Any())
            {
                @await Html.PartialAsync("_ClientTable", Model.PendingClients, new ViewDataDictionary(ViewData) { { "IsClearanceTable", false } })
            }
            else
            {
                <div class="text-center p-4">
                    <p class="text-muted">No pending applications.</p>
                </div>
            }
        </div>
        @if (Model.PendingClients.TotalPages > 1)
        {
            <div class="card-footer">
                @await Html.PartialAsync("_Pagination", new ViewDataDictionary(ViewData) { { "pageModel",
                Model.PendingClients }, { "pageAction", "Index" }, { "pageNumberParam", "pendingPageNumber" }, {
                "otherPageNumberParam", "clearancePageNumber" }, { "otherPageNumber", Model.ClearanceClients.PageIndex } })
        </div>
                }
    </div>

    <!-- Clients for Finance Clearance -->
    <div class="card shadow-sm">
        <div class="card-header bg-warning text-dark d-flex justify-content-between align-items-center">
            <h5 class="mb-0"><i class="bi bi-cash-coin"></i> Clients for Finance Clearance</h5>
            <span class="badge bg-dark rounded-pill">@Model.ClearanceClients.TotalCount</span>
        </div>
        <div class="card-body p-0">
            @if (Model.ClearanceClients.Any())
            {
                @await Html.PartialAsync("_ClientTable", Model.ClearanceClients, new ViewDataDictionary(ViewData) { { "IsClearanceTable", true } })
            }
            else
            {
                <div class="text-center p-4">
                    <p class="text-muted">No clients currently needing finance clearance.</p>
                </div>
            }
        </div>
        @if (Model.ClearanceClients.TotalPages > 1)
        {
            <div class="card-footer">
                @await Html.PartialAsync("_Pagination", new ViewDataDictionary(ViewData) { { "pageModel",
                Model.ClearanceClients }, { "pageAction", "Index" }, { "pageNumberParam", "clearancePageNumber" }, {
                "otherPageNumberParam", "pendingPageNumber" }, { "otherPageNumber", Model.PendingClients.PageIndex } })
        </div>
                }
    </div>
</div>

<!--Modals-->
<div class="modal fade" id="sendToPlanningModal" tabindex="-1">
    <div class="modal-dialog">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title">Confirm Action</h5>
                <button type="button" class="btn-close" data-bs-dismiss="modal"></button>
            </div>
            <div class="modal-body">
                Are you sure you want to send client <strong id="clientNamePlaceholder"></strong> to the Planning
                Officer?
            </div>
            <div class="modal-footer">
                <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Cancel</button>
                <form id="sendToPlanningForm" method="post">
                    <button type="submit" class="btn btn-success">Confirm & Send</button>
                </form>
            </div>
        </div>
    </div>
</div>

<div class="modal fade" id="archiveModal" tabindex="-1">
    <div class="modal-dialog">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title">Confirm Archive</h5>
                <button type="button" class="btn-close" data-bs-dismiss="modal"></button>
            </div>
            <div class="modal-body">
                Are you sure you want to archive client <strong id="archiveClientName"></strong>? This action cannot be easily undone.
            </div>
            <div class="modal-footer">
                <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Cancel</button>
                <form id="archiveForm" method="post">
                    <button type="submit" class="btn btn-danger">Archive Client</button>
                </form>
            </div>
        </div>
    </div>
</div>

@section Scripts {
    <script>
        document.addEventListener('DOMContentLoaded', function () {
            var sendModal = document.getElementById('sendToPlanningModal');
            sendModal.addEventListener('show.bs.modal', function (event) {
                var button = event.relatedTarget;
                var clientId = button.getAttribute('data-client-id');
                var clientName = button.getAttribute('data-client-name');

                var modalText = sendModal.querySelector('.modal-body strong');
                modalText.textContent = clientName;

                var form = sendModal.querySelector('#sendToPlanningForm');
                form.action = '/Finance/SendToPlanningOfficer/' + clientId;
            });

            var archiveModal = document.getElementById('archiveModal');
            archiveModal.addEventListener('show.bs.modal', function (event) {
                var button = event.relatedTarget;
                var clientId = button.getAttribute('data-client-id');
                var clientName = button.getAttribute('data-client-name');
                
                var modalText = archiveModal.querySelector('#archiveClientName');
                modalText.textContent = clientName;

                var form = archiveModal.querySelector('#archiveForm');
                form.action = '/Finance/ArchiveClient/' + clientId;
            });

            var tooltipTriggerList = [].slice.call(document.querySelectorAll('[data-bs-toggle="tooltip"]'))
            var tooltipList = tooltipTriggerList.map(function (tooltipTriggerEl) {
                return new bootstrap.Tooltip(tooltipTriggerEl)
            })
        });
    </script>
}

@* I will create the _ClientTable partial view next to avoid code duplication *@
