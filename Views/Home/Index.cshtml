@{
    ViewData["Title"] = "Home";
}

<div class="d-flex justify-content-between mb-3">
    <!-- Go to Task Flow Button -->
    <a href="@Url.Action("TaskFlow", "Task")" class="btn btn-primary">
        <i class="bi bi-arrow-left-circle"></i> Go to Task Flow
    </a>

    <!-- Edit Task Button (Initially Disabled) -->
    <a id="editTaskButton" href="#" class="btn btn-warning disabled">
        <i class="bi bi-pencil-square"></i> Edit Task
    </a>
</div>

<!-- ✅ Priority Legend -->
<div class="container">
    <h2 class="text-center"><i class="bi bi-kanban"></i> Task Overview</h2>
    <div class="d-flex justify-content-center gap-3 my-3">
        <span class="badge bg-success">Normal</span>
        <span class="badge bg-warning text-dark">Slightly Important</span>
        <span class="badge bg-danger">Urgent</span>
    </div>

    <!-- ✅ Sorting Dropdown -->
    <div class="d-flex justify-content-end mb-3">
        <label class="me-2" for="sortPriority">Sort by Priority:</label>
        <select id="sortPriority" class="form-select w-auto" onchange="sortTable()">
            <option value="">All</option>
            <option value="Normal">Normal</option>
            <option value="Slightly Important">Slightly Important</option>
            <option value="Urgent">Urgent</option>
        </select>
    </div>

    <!-- ✅ Task Table -->
    <div class="table-responsive">
        <table id="taskTable" class="table table-bordered table-striped" aria-describedby="taskTableDesc">
            <caption id="taskTableDesc" class="visually-hidden">List of client tasks with details and actions</caption>
            <thead class="table-dark">
                <tr>
                    <th scope="col">Client Name</th>
                    <th scope="col">Permit</th>
                    <th scope="col">Requirements</th>
                    <th scope="col">Priority</th>
                    <th scope="col">Progress</th>
                    <th scope="col">Date Issued</th>
                </tr>
            </thead>
            <tbody>
                @if (ViewBag.Tasks != null && ViewBag.Tasks.Count > 0)
                {
                    foreach (var task in ViewBag.Tasks)
                    {
                        var progress = (int)task.Progress;
                        var isZeroProgress = progress == 0;
                        var progressBarClass = isZeroProgress ? "bg-secondary" : "bg-info";
                        var progressLabel = isZeroProgress ? "No Progress" : $"{progress}%";

                        <tr class="task-row @GetPriorityClass(task.Priority)" data-task-id="@task.Id">
                            <td>@task.ClientName</td>
                            <td>@task.Permit</td>
                            <td>
                                @if (!string.IsNullOrWhiteSpace(task.Requirements))
                                {
                                    var reqs = task.Requirements.Split(',', StringSplitOptions.RemoveEmptyEntries);
                                    <ul class="mb-0 ps-3">
                                        @foreach (var req in reqs)
                                        {
                                            <li>@req.Trim()</li>
                                        }
                                    </ul>
                                }
                                else
                                {
                                    <span class="text-muted">None</span>
                                }
                            </td>
                            <td class="task-priority text-uppercase fw-semibold">@task.Priority</td>
                            <td>
                                <div class="d-flex flex-column align-items-start" style="min-width: 140px;">
                                    <div class="progress w-100" role="progressbar" aria-valuenow="@progress" aria-valuemin="0" aria-valuemax="100" title="@progressLabel" style="height: 24px;">
                                        <div class="progress-bar @progressBarClass d-flex align-items-center justify-content-center" style="width: @progress%;">
                                            <span class="fw-semibold text-white small">@progressLabel</span>
                                        </div>
                                    </div>
                                    @if (isZeroProgress)
                                    {
                                        <small class="text-muted mt-1">No progress yet</small>
                                    }
                                </div>
                            </td>
                            <td>@task.DateIssued.ToString("MMMM dd, yyyy HH:mm:ss")</td>                           
                        </tr>
                    }
                }
                else
                {
                    <tr>
                        <td colspan="7" class="text-center text-muted py-4">No tasks available.</td>
                    </tr>
                }
            </tbody>
        </table>
    </div>
</div>

<!-- ✅ Sorting & Secondary Screen Detection Script -->
<script>
    function checkForSecondaryScreen() {
        if (window.screen.availWidth > window.screen.width || window.screen.availHeight > window.screen.height) {
            let newWin = window.open("/", "SecondaryScreen", "width=1920,height=1080");
            if (newWin) {
                newWin.moveTo(window.screen.availWidth - newWin.outerWidth, 0);
                newWin.focus();
            }
        } else {
            alert("No secondary screen detected. The homepage will be displayed on the primary screen.");
        }
    }
    window.onload = checkForSecondaryScreen;

    function sortTable() {
        let selectedPriority = document.getElementById("sortPriority").value.toLowerCase();
        let table = document.getElementById("taskTable");
        let rows = table.getElementsByTagName("tr");

        for (let i = 1; i < rows.length; i++) {
            let priorityCell = rows[i].getElementsByClassName("task-priority")[0];
            if (priorityCell) {
                let priorityText = priorityCell.innerText.toLowerCase();
                rows[i].style.display = (selectedPriority === "" || priorityText === selectedPriority) ? "" : "none";
            }
        }
    }
</script>
<script>
    document.addEventListener("DOMContentLoaded", function () {
        let tasks = document.querySelectorAll(".task-row"); // Select all task rows
        let editTaskButton = document.getElementById("editTaskButton");

        if (tasks.length > 0) {
            let firstTaskId = tasks[0].getAttribute("data-task-id"); // Get the first task ID
            editTaskButton.href = "/Task/EditTask/" + firstTaskId;
            editTaskButton.classList.remove("disabled"); // Enable the button
        } else {
            editTaskButton.onclick = function () {
                alert("No tasks available to edit.");
                return false;
            };
        }
    });
</script>

@functions {
    public string GetPriorityClass(string priority)
    {
        return priority switch
        {
            "Normal" => "table-success",
            "Slightly Important" => "table-warning",
            "Urgent" => "table-danger",
            _ => ""
        };
    }
}
