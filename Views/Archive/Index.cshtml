@model PaginatedList<TestingDemo.Models.ClientModel>
@using TestingDemo.Models

@{
    ViewData["Title"] = "Client Archive";
}

<div class="container-fluid">
    <h2 class="mb-4"><i class="bi bi-archive-fill"></i> @ViewData["Title"]</h2>

    <div class="card shadow-sm mb-4">
        <div class="card-header bg-light">
            <h5 class="mb-0"><i class="bi bi-funnel"></i> Filter Clients</h5>
        </div>
        <div class="card-body">
            <form asp-action="Index" method="get" class="row g-2 align-items-end">
                <div class="col-12 col-md-3">
                    <label class="form-label mb-1">Client Name</label>
                    <input type="text" name="SearchString" value="@ViewData["CurrentFilter"]"
                        class="form-control form-control-sm" placeholder="Find by name...">
                </div>
                <div class="col-12 col-md-3">
                    <label class="form-label mb-1">Permit Type</label>
                    @{
                        var typeOfProject = Context.Request.Query["TypeOfProject"].ToString();
                        var projectTypes = new[] { "Retainership - BIR", "Retainership - SPP", "One Time Transaction",
                                        "External Audit", "Other" };
                        var optionsString = "<option value=''>All Types</option>";
                        foreach (var type in projectTypes)
                        {
                            var selected = typeOfProject == type ? " selected='selected'" : "";
                            optionsString += $"<option value='{type}'{selected}>{type}</option>";
                        }
                    }
                    <select name="TypeOfProject" class="form-select form-select-sm">
                        @Html.Raw(optionsString)
                    </select>
                </div>
                <div class="col-6 col-md-2">
                    <label class="form-label mb-1">Date From</label>
                    <input type="date" name="CreatedDateFrom" value="@Context.Request.Query["CreatedDateFrom"]"
                        class="form-control form-control-sm">
                </div>
                <div class="col-6 col-md-2">
                    <label class="form-label mb-1">Date To</label>
                    <input type="date" name="CreatedDateTo" value="@Context.Request.Query["CreatedDateTo"]"
                        class="form-control form-control-sm">
                </div>
                <div class="col-12 col-md-2 d-flex gap-2">
                    <button type="submit" class="btn btn-primary btn-sm w-100"><i class="bi bi-search"></i>
                        Filter</button>
                    <a asp-action="Index" class="btn btn-outline-secondary btn-sm w-100">Clear</a>
                </div>
            </form>
        </div>
    </div>

    <div class="card shadow-sm">
        <div class="card-header bg-light py-2">
            <div class="d-flex justify-content-between align-items-center">
                <h5 class="mb-0 text-muted"><i class="bi bi-clock-history"></i> Archived Client History</h5>
            </div>
        </div>
        <div class="card-body p-0">
            @if (Model.Any())
            {
                <div class="table-responsive">
                    <table class="table table-hover table-striped mb-0">
                        <thead class="table-light">
                            <tr>
                                <th><a asp-action="Index" asp-route-sortOrder="@ViewData["NameSortParm"]"
                                        asp-route-currentFilter="@ViewData["CurrentFilter"]">Client</a></th>
                                <th>Contact</th>
                                <th><a asp-action="Index" asp-route-sortOrder="@ViewData["TypeSortParm"]"
                                        asp-route-currentFilter="@ViewData["CurrentFilter"]">Permit Type</a></th>
                                <th><a asp-action="Index" asp-route-sortOrder="@ViewData["DateSortParm"]"
                                        asp-route-currentFilter="@ViewData["CurrentFilter"]">Archived Date</a></th>
                                <th><a asp-action="Index" asp-route-sortOrder="@ViewData["StatusSortParm"]"
                                        asp-route-currentFilter="@ViewData["CurrentFilter"]">Status</a></th>
                                <th class="text-center">Actions</th>
                            </tr>
                        </thead>
                        <tbody>
                            @foreach (var item in Model)
                            {
                                <tr>
                                    <td>@item.ClientName</td>
                                    <td>@item.ContactPersonNumber</td>
                                    <td>@item.TypeOfProject</td>
                                    <td>@item.CreatedDate.ToString("yyyy-MM-dd")</td>
                                    <td>@item.Status</td>
                                    <td class="text-center">
                                        <a asp-controller="Archive" asp-action="Details" asp-route-id="@item.Id"
                                            class="btn btn-outline-info btn-sm" title="View Details"><i
                                                class="bi bi-eye"></i></a>
                                    </td>
                                </tr>
                            }
                        </tbody>
                    </table>
                </div>
            }
            else
            {
                <div class="alert alert-info m-3">
                    <i class="bi bi-info-circle"></i> No archived clients found.
                </div>
            }
        </div>
        <div class="card-footer bg-light">
            <nav aria-label="Page navigation">
                @{
                    var prevDisabled = !Model.HasPreviousPage ? "disabled" : "";
                    var nextDisabled = !Model.HasNextPage ? "disabled" : "";
                }
                <ul class="pagination justify-content-center mb-0">
                    <li class="page-item @prevDisabled">
                        <a asp-action="Index" asp-route-sortOrder="@ViewData["CurrentSort"]"
                            asp-route-pageNumber="@(Model.PageIndex - 1)"
                            asp-route-currentFilter="@ViewData["CurrentFilter"]" class="page-link">&laquo; Previous</a>
                    </li>
                    <li class="page-item active" aria-current="page">
                        <span class="page-link">Page @Model.PageIndex of @Model.TotalPages</span>
                    </li>
                    <li class="page-item @nextDisabled">
                        <a asp-action="Index" asp-route-sortOrder="@ViewData["CurrentSort"]"
                            asp-route-pageNumber="@(Model.PageIndex + 1)"
                            asp-route-currentFilter="@ViewData["CurrentFilter"]" class="page-link">Next &raquo;</a>
                    </li>
                </ul>
            </nav>
        </div>
    </div>
</div>

<audio id="notifySound" src="/sounds/Notifications.mp3" preload="auto"></audio>

@section Scripts {
    <script>
        // Store initial client IDs for Archive table
        let archiveClientIds = Array.from(document.querySelectorAll('tbody tr')).map(row => row.querySelector('a[asp-route-id]')?.getAttribute('asp-route-id')).filter(Boolean);
        function playNotifySound() {
            var audio = document.getElementById('notifySound');
            if (audio) {
                audio.currentTime = 0;
                audio.play();
            }
        }
        function renderArchive(data) {
            let newIds = (data.items || []).map(c => c.id?.toString());
            let isNew = newIds.some(id => !archiveClientIds.includes(id));
            if (isNew) {
                playNotifySound();
            }
            location.reload();
        }
        if (window.connection) {
            connection.on("ReceiveUpdate", function (message) {
                fetch('/Archive/GetLatestData')
                    .then(response => response.json())
                    .then(data => {
                        renderArchive(data);
                    });
            });
        }
    </script>
}